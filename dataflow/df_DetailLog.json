{
	"name": "df_DetailLog",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "readDBMovie",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "exportFile",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Sort1"
				},
				{
					"name": "CollectAndCount"
				},
				{
					"name": "medianOut"
				}
			],
			"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 sort(asc(genres, true)) ~> Sort1\nSort1 aggregate(ratingsCollection = collect(Rating),\n\t\tratingsCount = count(Rating),\n\t\tcantidadRows = countDistinct()) ~> CollectAndCount\nCollectAndCount derive(median = ratingsCollection[toInteger(round(ratingsCount/2)+1)],\n\t\t{} = ERROR_FUNCTION('')) ~> medianOut\nmedianOut sink(input(\n\t\tcodigoCatalogo as string,\n\t\tnombreCatalogo as string,\n\t\tnombrePipeline as string,\n\t\tfrecuencia as string,\n\t\tobjeto as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}